name: 🛡️  Vulnerability Scan
on:
  schedule:
    # 毎週月曜日の午前９時（UTC）に実行
    - cron: '0 9 * * 1'
  push:
  pull_request:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ========================================
  # リポジトリ全体のセキュリティスキャン
  # 依存関係、OSパッケージ、IaC設定、コミット履歴の脆弱性をチェック
  # ========================================
  repository-security-scan:
    name: 🔍 Repository Security Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          # 履歴を取得してコミット履歴もスキャン
          fetch-depth: 0
          
      - name: 🛡️ Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          # リポジトリ全体をスキャン（設定ミス、脆弱性、コミット履歴）
          scan-type: 'repo'
          scan-ref: '.'
          # シークレットスキャンは別ワークフロー（scan-secret.yml）で実行済みのため除外
          scanners: 'misconfig,vuln'
          # 重要度レベル: CRITICAL(致命的), HIGH(高), MEDIUM(中)
          severity: 'CRITICAL,HIGH,MEDIUM'
          # 脆弱性があってもワークフローを継続（ログで確認）
          exit-code: '0'
          
  # ========================================
  # Dockerイメージスキャン
  # ローカルビルドイメージの脆弱性をチェック
  # ========================================
  docker-image-scan:
    name: 🐳 Docker Image Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Build Docker Image
        working-directory: server
        # Dockerfileが存在する場合のみ実行
        if: hashFiles('server/Dockerfile') != ''
        run: |
          # イメージをビルド
          docker build -t local-test-image .
          
      - name: 🛡️ Scan Docker Image
        uses: aquasecurity/trivy-action@master
        # Dockerfileが存在する場合のみ実行
        if: hashFiles('server/Dockerfile') != ''
        with:
          scan-type: 'image'
          scan-ref: 'local-test-image:latest'
          # イメージ内の脆弱性と設定ミスをチェック
          scanners: 'vuln,misconfig'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          
  # ========================================
  # ECRコンテナイメージスキャン
  # 本番環境のECRイメージの脆弱性をチェック（mainブランチのみ）
  # ========================================
  ecr-scan:
    name: 🐳 ECR Container Image Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # mainブランチへのpush時のみ実行
    if: github.event_name == 'push' && contains(github.ref, 'main')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: 🐳 Scan ECR Images
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: '${{ secrets.ECR_REPOSITORY_URI }}:latest'
          # 本番環境のコンテナイメージの脆弱性をチェック
          scanners: 'vuln,misconfig'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          