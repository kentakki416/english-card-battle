name: 🛡️  Vulnerability Scan
on:
  schedule:
    # 毎週月曜日の午前９時（UTC）に実行
    - cron: '0 9 * * 1'
  workflow_dispatch:
permissions:
  contents: read
  security-events: write
  actions: read
defaults:
  run:
    shell: bash
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  # ========================================
  # リポジトリ全体のセキュリティスキャン
  # 依存関係、OSパッケージ、コミット履歴の脆弱性をチェック
  # ========================================
  repository-security-scan:
    name: 🔍 Repository Security Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          # 履歴を取得してコミット履歴もスキャン
          fetch-depth: 0
          
      - name: 🛡️ Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          # リポジトリ全体をスキャン（設定ミス、脆弱性、コミット履歴）
          scan-type: 'repo'
          scan-ref: '.'
          # シークレットスキャンは別ワークフロー（scan-secret.yml）で実行済みのため除外
          scanners: 'misconfig,vuln'
          # 重要度レベル: CRITICAL(致命的), HIGH(高), MEDIUM(中)
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

          
  # ========================================
  # Dockerイメージスキャン
  # ローカルビルドイメージの脆弱性をチェック
  # ========================================
  docker-image-scan:
    name: 🐳 Docker Image Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        
      - name: 🐳 Build Docker Image
        working-directory: api-server
        run: |
          # イメージをビルド
          docker build -t local-test-image .
          
      - name: 🛡️ Scan Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: 'local-test-image:latest'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'
          