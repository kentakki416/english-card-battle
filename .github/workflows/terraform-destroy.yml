name: 💥 Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prd
      confirm_destroy:
        description: 'Type "DESTROY" exactly to confirm destruction (case sensitive)'
        required: true
        type: string
      dry_run:
        description: 'Run destroy plan only (dry run)'
        required: false
        default: true
        type: boolean

env:
  TF_VERSION: "1.7.0"
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  AWS_REGION: ap-northeast-1

jobs:
  terraform-destroy:
    name: 💥 Terraform Destroy
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}-destroy
      url: https://console.aws.amazon.com/
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_environment: ${{ github.event.inputs.environment }}
    steps:
      - name: 🔍 Validate Inputs
        run: |
          echo "🔍 Validating destroy inputs..."
          
          # Normalize inputs
          CONFIRM_DESTROY=$(echo "${{ github.event.inputs.confirm_destroy }}" | tr -d '[:space:]')
          ENVIRONMENT=$(echo "${{ github.event.inputs.environment }}" | tr -d '[:space:]')
          
          # Check confirmation
          if [[ "${CONFIRM_DESTROY}" != "DESTROY" ]]; then
            echo "❌ You must type 'DESTROY' exactly to confirm"
            exit 1
          fi
          
          # Check environment validity  
          if [[ "${ENVIRONMENT}" != "dev" && "${ENVIRONMENT}" != "prd" ]]; then
            echo "❌ Invalid environment: ${ENVIRONMENT}"
            exit 1
          fi
          
          # Production warning
          if [[ "${ENVIRONMENT}" == "prd" ]]; then
            echo "⚠️ PRODUCTION ENVIRONMENT DESTROY!"
            echo "🚨 This will permanently delete all production resources!"
            sleep 5
          fi
          
          echo "✅ Input validation passed"

      - name: 📥 Checkout & Setup
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔍 Check Current State
        id: state-check
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "🔍 Checking Terraform state..."
          terraform init
          
          RESOURCE_COUNT=$(terraform state list 2>/dev/null | wc -l || echo "0")
          echo "RESOURCE_COUNT=$RESOURCE_COUNT" >> $GITHUB_ENV
          
          if [[ "$RESOURCE_COUNT" -eq 0 ]]; then
            echo "ℹ️ No resources found. Nothing to destroy."
          else
            echo "⚠️ Found $RESOURCE_COUNT resources to destroy:"
            terraform state list
          fi

      - name: 📋 Generate Destroy Plan
        if: env.RESOURCE_COUNT != '0'
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "📋 Creating destroy plan..."
          terraform plan -destroy -detailed-exitcode -out=destroy.tfplan
          
          echo "📊 Plan summary:"
          terraform show -no-color destroy.tfplan

      - name: 🔍 Critical Resource Check
        if: env.RESOURCE_COUNT != '0'
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "🔍 Checking for critical resources..."
          
          if terraform show -no-color destroy.tfplan | grep -i "rds\|database\|s3_bucket\|lb\|load_balancer"; then
            echo "⚠️ WARNING: Critical resources will be destroyed!"
            terraform show -no-color destroy.tfplan | grep -i "rds\|database\|s3_bucket\|lb\|load_balancer"
          fi

      - name: 💥 Execute Destroy
        if: env.RESOURCE_COUNT != '0' && github.event.inputs.dry_run != 'true'
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "💥 Executing destroy for ${{ github.event.inputs.environment }}..."
          echo "⚠️ FINAL WARNING: Starting in 10 seconds..."
          sleep 10
          
          echo "⏰ Started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          terraform apply destroy.tfplan
          echo "✅ Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

      - name: 🔍 Verify Results
        if: env.RESOURCE_COUNT != '0' && github.event.inputs.dry_run != 'true'
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "🔍 Verifying destroy results..."
          REMAINING=$(terraform state list | wc -l)
          
          if [[ "$REMAINING" -eq 0 ]]; then
            echo "✅ All resources destroyed successfully"
            echo "DESTROY_STATUS=success" >> $GITHUB_ENV
          else
            echo "⚠️ $REMAINING resources remain"
            terraform state list
            echo "DESTROY_STATUS=partial" >> $GITHUB_ENV
          fi

      - name: 📊 Summary
        run: |
          echo "## 💥 Terraform Destroy Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌍 Environment | \`${{ github.event.inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔄 Mode | \`${{ github.event.inputs.dry_run == 'true' && 'Dry Run' || 'Execute' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Resources | \`${{ env.RESOURCE_COUNT }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 By | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🕐 Time | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ env.RESOURCE_COUNT }}" == "0" ]]; then
            echo "### ℹ️ No resources found to destroy" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "### 📋 Dry run completed - plan generated" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ To execute, run again with dry_run=false" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ env.DESTROY_STATUS }}" == "success" ]]; then
            echo "### ✅ Destroy completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ env.DESTROY_STATUS }}" == "partial" ]]; then
            echo "### ⚠️ Partial destroy - some resources remain" >> $GITHUB_STEP_SUMMARY
          fi 
