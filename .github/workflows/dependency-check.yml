name: 🔍 Dependency Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run dependency check every Monday at 9 AM JST (00:00 UTC)
    - cron: '0 0 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  go-security:
    name: 🔒 Go Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-dir: [unit, integration]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: 📦 Download Go Dependencies
        working-directory: infra/aws/test/${{ matrix.test-dir }}
        run: |
          echo "🔍 Processing Go module in ${{ matrix.test-dir }} directory..."
          go mod download
          go mod tidy

      - name: 🔍 Run Gosec Security Scanner
        working-directory: infra/aws/test/${{ matrix.test-dir }}
        run: |
          echo "🔒 Running Gosec security scan for ${{ matrix.test-dir }}..."
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-${{ matrix.test-dir }}-results.sarif ./...

      - name: 📊 Upload Gosec Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: infra/aws/test/${{ matrix.test-dir }}/gosec-${{ matrix.test-dir }}-results.sarif

      - name: 🛡️ Run Nancy (Go vulnerability check)
        working-directory: infra/aws/test/${{ matrix.test-dir }}
        run: |
          echo "🛡️ Running Nancy vulnerability check for ${{ matrix.test-dir }}..."
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth

  terraform-version-check:
    name: 📋 Terraform Version Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Check Terraform Version Consistency
        run: |
          echo "🔍 Checking Terraform version consistency across the project..."
          
          # Extract version from GitHub Actions workflow
          WORKFLOW_VERSION=$(grep -r "TF_VERSION:" .github/workflows/ | head -1 | cut -d'"' -f2)
          echo "Workflow version: $WORKFLOW_VERSION"
          
          # Check if .terraform-version file exists
          if [ -f ".terraform-version" ]; then
            FILE_VERSION=$(cat .terraform-version)
            echo "File version: $FILE_VERSION"
            
            if [ "$WORKFLOW_VERSION" != "$FILE_VERSION" ]; then
              echo "❌ Terraform version mismatch!"
              echo "Workflow: $WORKFLOW_VERSION"
              echo "File: $FILE_VERSION"
              exit 1
            else
              echo "✅ Terraform versions are consistent"
            fi
          else
            echo "⚠️ .terraform-version file not found - this is acceptable"
            echo "✅ Using workflow version: $WORKFLOW_VERSION"
          fi

  terraform-docs-check:
    name: 📚 Terraform Docs Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📚 Generate Terraform Docs
        uses: terraform-docs/gh-actions@v1.2.0
        with:
          working-dir: infra/aws/modules/vpc,infra/aws/modules/alb,infra/aws/modules/ecs
          output-file: README.md
          output-method: inject
          git-push: false
          fail-on-diff: true

  cost-estimation:
    name: 💰 Infrastructure Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: 🔧 Terraform Init
        working-directory: infra/aws/env/dev
        run: |
          echo "🚀 Initializing Terraform for cost estimation..."
          terraform init

      - name: 📋 Generate Plan for Cost Estimation
        working-directory: infra/aws/env/dev
        run: |
          echo "📋 Generating Terraform plan for cost analysis..."
          terraform plan -out=tfplan.out
          terraform show -json tfplan.out > tfplan.json

      - name: 💰 Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: 💰 Generate Cost Estimate
        working-directory: infra/aws/env/dev
        run: |
          echo "💰 Generating infrastructure cost breakdown..."
          infracost breakdown --path=tfplan.json --format=json --out-file=infracost-base.json

      - name: 💬 Comment Cost Estimate on PR
        uses: infracost/actions/comment@v1
        if: github.event_name == 'pull_request'
        with:
          path: infra/aws/env/dev/infracost-base.json
          behavior: update

  # ========================================
  # 📊 Dependency Summary
  # ========================================

  dependency-summary:
    name: 📊 Dependency Check Summary
    runs-on: ubuntu-latest
    needs: [go-security, terraform-version-check, terraform-docs-check]
    if: always()
    steps:
      - name: 📊 Generate Summary
        run: |
          echo "## 🔍 Dependency Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Go Security Scan | ${{ needs.go-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 Terraform Version Check | ${{ needs.terraform-version-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📚 Terraform Docs Check | ${{ needs.terraform-docs-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.go-security.result }}" == "success" && "${{ needs.terraform-version-check.result }}" == "success" && "${{ needs.terraform-docs-check.result }}" == "success" ]]; then
            echo "✅ All dependency checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some dependency checks failed. Please review above." >> $GITHUB_STEP_SUMMARY
          fi 
