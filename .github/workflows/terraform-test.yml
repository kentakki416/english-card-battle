name: 🏗️ Terraform CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infra/**'
      - '.github/workflows/terraform-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'infra/**'
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prd

permissions:
  contents: read
  pull-requests: write
  security-events: write

env:
  TF_VERSION: "1.7.0"
  TF_IN_AUTOMATION: true
  TF_CLI_ARGS: "-no-color"
  TF_INPUT: false
  AWS_REGION: ap-northeast-1

jobs:
  # ========================================
  # 🔍 Change Detection
  # ========================================
  
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      terraform: ${{ steps.changes.outputs.terraform }}
      tests: ${{ steps.changes.outputs.tests }}
      modules: ${{ steps.changes.outputs.modules }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            terraform:
              - 'infra/**/*.tf'
              - 'infra/**/*.tfvars'
              - 'infra/**/*.tfvars.example'
            tests:
              - 'infra/**/*test.go'
              - 'infra/**/go.mod'
              - 'infra/**/go.sum'
            modules:
              - 'infra/aws/modules/**'

  # ========================================
  # 🧹 Terraform Lint & Validation
  # ========================================

  terraform-validate:
    name: 🧹 Lint, Validate & Format Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.terraform == 'true'
    strategy:
      matrix:
        directory:
          - infra/aws/env/dev
          - infra/aws/modules/vpc
          - infra/aws/modules/alb
          - infra/aws/modules/ecs
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🎯 Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: 📝 Terraform Format Check
        working-directory: ${{ matrix.directory }}
        run: |
          echo "🔍 Checking Terraform format in ${{ matrix.directory }}..."
          terraform fmt -check -recursive -diff
        continue-on-error: false

      - name: 🔧 Terraform Init
        working-directory: ${{ matrix.directory }}
        run: |
          echo "🚀 Initializing Terraform in ${{ matrix.directory }}..."
          terraform init -backend=false

      - name: ✅ Terraform Validate
        working-directory: ${{ matrix.directory }}
        run: |
          echo "✨ Validating Terraform configuration in ${{ matrix.directory }}..."
          terraform validate

      - name: 🎯 TFLint
        working-directory: ${{ matrix.directory }}
        run: |
          echo "🔍 Running TFLint in ${{ matrix.directory }}..."
          tflint --init
          tflint --format compact

      - name: 📊 Terraform Providers
        working-directory: ${{ matrix.directory }}
        run: |
          echo "📊 Showing Terraform providers in ${{ matrix.directory }}..."
          terraform providers
        continue-on-error: true

  # ========================================
  # 🔒 Security Scanning
  # ========================================

  terraform-security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.terraform == 'true'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔒 Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infra/aws
          soft_fail: true

      - name: 🛡️ Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: infra/aws
          soft_fail: true
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: 📊 Upload Checkov Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

  # ========================================
  # 📋 State Management Check
  # ========================================

  terraform-state-check:
    name: 📋 State & Workspace Check
    runs-on: ubuntu-latest
    needs: changes
    if: github.event_name != 'pull_request' && needs.changes.outputs.terraform == 'true'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    strategy:
      matrix:
        environment: [dev]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔧 Terraform Init
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "🚀 Initializing Terraform for ${{ matrix.environment }}..."
          terraform init

      - name: 🏢 Terraform Workspace Show
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "🏢 Current Terraform workspace:"
          terraform workspace show
        continue-on-error: true

      - name: 📋 Terraform State List
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "📋 Current Terraform state for ${{ matrix.environment }}:"
          terraform state list || echo "No state found - this is normal for new environments"
        continue-on-error: true

      - name: 📊 Terraform State Show (Summary)
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "📊 Terraform state summary:"
          if terraform state list > /dev/null 2>&1; then
            echo "Resource count: $(terraform state list | wc -l)"
            echo "Resources by type:"
            terraform state list | cut -d'.' -f1 | sort | uniq -c
          else
            echo "No resources in state"
          fi
        continue-on-error: true

  # ========================================
  # 🧪 Go Testing
  # ========================================

  terraform-go-tests:
    name: 🧪 Go Infrastructure Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.tests == 'true' || needs.changes.outputs.terraform == 'true'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-northeast-1
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: infra/aws/test/go.sum

      - name: 📦 Download Dependencies
        working-directory: infra/aws/test
        run: |
          go mod download
          go mod tidy

      - name: 🧪 Run Unit Tests
        working-directory: infra/aws/test
        run: |
          echo "🧪 Running Go unit tests..."
          go test -v ./unit/... -timeout 30m

      - name: 🧪 Run Integration Tests
        working-directory: infra/aws/test
        run: |
          echo "🧪 Running Go integration tests..."
          go test -v ./integration/... -timeout 45m
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

      - name: 📊 Test Results Summary
        run: |
          echo "## 🧪 Go Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "- Integration tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Integration tests: ⏭️ Skipped (only on main push)" >> $GITHUB_STEP_SUMMARY
          fi

  # ========================================
  # 📋 Terraform Plan & Analysis
  # ========================================

  terraform-plan-test:
    name: 📋 Terraform Plan & Analysis
    runs-on: ubuntu-latest
    needs: [changes, terraform-validate, terraform-security]
    if: needs.changes.outputs.terraform == 'true'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    strategy:
      matrix:
        environment: [dev]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔧 Terraform Init
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "🚀 Initializing Terraform for ${{ matrix.environment }}..."
          terraform init

      - name: 📋 Terraform Plan
        id: plan
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "📋 Creating Terraform plan for ${{ matrix.environment }}..."
          terraform plan -detailed-exitcode -no-color -out=tfplan.out | tee plan_output.txt
          echo "plan_exitcode=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: 💾 Save Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: infra/aws/env/${{ matrix.environment }}/tfplan.out
          retention-days: 5

      - name: 📊 Plan Analysis
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "📊 Analyzing Terraform plan..."
          if [ -f tfplan.out ]; then
            echo "=== Plan Summary ==="
            terraform show -no-color tfplan.out | grep -E "^(Plan:|No changes)" || echo "Plan analysis completed"
            
            echo "=== Resource Changes ==="
            terraform show -no-color tfplan.out | grep -E "^  [+~-]" | head -20 || echo "No resource changes detected"
          else
            echo "No plan file generated"
          fi

      - name: 🔍 Safety Checks
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "🔍 Running safety checks..."
          
          if [ -f tfplan.out ]; then
            # Check for destroy operations
            if terraform show -no-color tfplan.out | grep -q "destroy"; then
              echo "⚠️ WARNING: Plan contains resource destruction!"
              terraform show -no-color tfplan.out | grep -A 2 -B 2 "destroy"
            fi
            
            # Check for sensitive data
            if terraform show -no-color tfplan.out | grep -i "password\|secret\|key" | grep -v "sensitive"; then
              echo "⚠️ WARNING: Potential sensitive data exposure!"
            fi
          fi
          
          echo "✅ Safety checks completed"

      - name: 🧪 Plan Validation Tests
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "🧪 Running plan validation tests..."
          
          # Check if plan file exists
          if [ ! -f tfplan.out ]; then
            echo "❌ Plan file not generated"
            exit 1
          fi
          
          # Check for dangerous operations
          if [ -f plan_output.txt ]; then
            echo "✅ Plan output captured successfully"
          fi
          
          echo "✅ Plan validation completed"

      - name: 📝 Format Plan for PR Comment
        id: format_plan
        if: github.event_name == 'pull_request'
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          if [ -f plan_output.txt ]; then
            # Extract the actual plan output
            PLAN_OUTPUT=$(cat plan_output.txt)
            
            # Truncate if too long (GitHub comment limit)
            if [ ${#PLAN_OUTPUT} -gt 10000 ]; then
              PLAN_OUTPUT="${PLAN_OUTPUT:0:10000}... (truncated)"
            fi
            
            # Save to GitHub output (properly escaped)
            {
              echo "plan_output<<EOF"
              echo "$PLAN_OUTPUT"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            echo "plan_output=No plan output available" >> $GITHUB_OUTPUT
          fi

  # ========================================
  # 📊 Output Validation
  # ========================================

  terraform-output-test:
    name: 📊 Output Validation
    runs-on: ubuntu-latest
    needs: terraform-plan-test
    if: github.event_name != 'pull_request' && needs.changes.outputs.terraform == 'true'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    strategy:
      matrix:
        environment: [dev]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔧 Terraform Init
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "🚀 Initializing Terraform for output validation..."
          terraform init

      - name: 📊 Terraform Output
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "📊 Terraform outputs for ${{ matrix.environment }}:"
          terraform output || echo "No outputs defined or no state exists"
        continue-on-error: true

      - name: 🔍 Output Validation
        working-directory: infra/aws/env/${{ matrix.environment }}
        run: |
          echo "🔍 Validating output format and values..."
          
          # Check if outputs are valid JSON
          if terraform output -json > /tmp/outputs.json 2>/dev/null; then
            echo "✅ Outputs are valid JSON format"
            
            # Validate specific outputs if they exist
            if cat /tmp/outputs.json | jq -e '.vpc_id' > /dev/null 2>&1; then
              echo "✅ VPC ID output exists"
            fi
            
            if cat /tmp/outputs.json | jq -e '.alb_dns_name' > /dev/null 2>&1; then
              echo "✅ ALB DNS name output exists"
            fi
          else
            echo "ℹ️ No outputs available or invalid format"
          fi

  # ========================================
  # 💬 PR Comment with Results
  # ========================================

  pr-comment:
    name: 💬 PR Comment with Results
    runs-on: ubuntu-latest
    needs: [changes, terraform-validate, terraform-security, terraform-go-tests, terraform-plan-test]
    if: github.event_name == 'pull_request'
    steps:
      - name: 🔍 Find Previous Comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '## 🏗️ Terraform CI Results'

      - name: 💬 Create or Update PR Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            ## 🏗️ Terraform CI Results
            
            ### 📊 Pipeline Status
            | Job | Status |
            |-----|--------|
            | 🔍 Change Detection | ${{ needs.changes.result }} |
            | 🧹 Lint & Validate | ${{ needs.terraform-validate.result }} |
            | 🔒 Security Scan | ${{ needs.terraform-security.result }} |
            | 🧪 Go Tests | ${{ needs.terraform-go-tests.result }} |
            | 📋 Plan & Analysis | ${{ needs.terraform-plan-test.result }} |
            
            ### 🔍 Change Detection
            - **Terraform files**: `${{ needs.changes.outputs.terraform }}`
            - **Test files**: `${{ needs.changes.outputs.tests }}`
            - **Modules**: `${{ needs.changes.outputs.modules }}`
            
            ### 📋 Terraform Plan
            <details>
            <summary>Show Plan Output</summary>
            
            ```hcl
            ${{ needs.terraform-plan-test.outputs.plan_output || 'Plan output not available' }}
            ```
            </details>
            
            ### ✅ Next Steps
            ${{ (needs.terraform-validate.result == 'success' && needs.terraform-security.result == 'success' && needs.terraform-plan-test.result == 'success') && '🎉 All checks passed! Ready for merge.' || '❌ Some checks failed. Please review the errors above.' }}
            
            ---
            *Updated at: ${{ github.event.pull_request.updated_at }}*

  # ========================================
  # ✅ CI Summary
  # ========================================

  ci-summary:
    name: ✅ CI Summary
    runs-on: ubuntu-latest
    needs: [changes, terraform-validate, terraform-security, terraform-go-tests, terraform-plan-test]
    if: always()
    steps:
      - name: 📊 CI Results Summary
        run: |
          echo "## 🏗️ Terraform CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Change Detection | ${{ needs.changes.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧹 Lint & Validate | ${{ needs.terraform-validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security Scan | ${{ needs.terraform-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Go Tests | ${{ needs.terraform-go-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 Plan & Analysis | ${{ needs.terraform-plan-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.terraform-validate.result }}" == "success" && "${{ needs.terraform-security.result }}" == "success" && "${{ needs.terraform-plan-test.result }}" == "success" ]]; then
            echo "✅ All CI checks passed! Infrastructure is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some CI checks failed. Please review before proceeding." >> $GITHUB_STEP_SUMMARY
          fi 
