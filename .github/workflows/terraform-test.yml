name: 🏗️ Terraform CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infra/**'
      - '.github/workflows/terraform-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'infra/**'
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prd

permissions:
  contents: read
  pull-requests: write
  security-events: write

env:
  TF_VERSION: "1.7.0"
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  AWS_REGION: ap-northeast-1

jobs:
  # ========================================
  # 🔍 Change Detection
  # ========================================
  
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      terraform: ${{ steps.changes.outputs.terraform }}
      tests: ${{ steps.changes.outputs.tests }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            terraform:
              - 'infra/**/*.tf'
              - 'infra/**/*.tfvars'
              - 'infra/**/*.tfvars.example'
            tests:
              - 'infra/**/*test.go'
              - 'infra/**/go.mod'
              - 'infra/**/go.sum'

  # ========================================
  # 🧹 Lint & Security
  # ========================================

  lint-and-security:
    name: 🧹 Lint & Security
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.terraform == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🎯 Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: 📝 Format Check
        working-directory: infra/aws
        run: terraform fmt -check -recursive -diff

      - name: ✅ Validate & Lint
        working-directory: infra/aws/env/dev
        run: |
          terraform init -backend=false
          terraform validate
          cd ../../
          tflint --init
          tflint --format compact

      - name: 🔒 Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infra/aws
          soft_fail: true

      - name: 🛡️ Checkov Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: infra/aws
          soft_fail: true
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: 📊 Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

  # ========================================
  # 🧪 Go Tests
  # ========================================

  go-tests:
    name: 🧪 Go Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.tests == 'true' || needs.changes.outputs.terraform == 'true'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-northeast-1
      TERRATEST_TERRAFORM_BINARY: terraform
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: infra/aws/test/go.sum

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🧪 Run Tests
        working-directory: infra/aws/test
        run: |
          go mod download
          go test -v ./unit/... -timeout 30m
          
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            go test -v ./integration/... -timeout 45m
          fi

  # ========================================
  # 📋 Terraform Plan
  # ========================================

  terraform-plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    needs: [changes, lint-and-security]
    if: needs.changes.outputs.terraform == 'true'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      plan_output: ${{ steps.format_plan.outputs.plan_output }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 📋 Generate Plan
        working-directory: infra/aws/env/dev
        run: |
          terraform init
          terraform plan -detailed-exitcode -no-color -out=tfplan.out | tee plan_output.txt
        continue-on-error: true

      - name: 💾 Save Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-dev
          path: infra/aws/env/dev/tfplan.out
          retention-days: 5

      - name: 🔍 Safety Checks
        working-directory: infra/aws/env/dev
        run: |
          if [ -f tfplan.out ]; then
            if terraform show -no-color tfplan.out | grep -q "destroy"; then
              echo "⚠️ WARNING: Plan contains resource destruction!"
            fi
          fi

      - name: 📝 Format Plan for PR
        id: format_plan
        if: github.event_name == 'pull_request'
        working-directory: infra/aws/env/dev
        run: |
          if [ -f plan_output.txt ]; then
            PLAN_OUTPUT=$(cat plan_output.txt)
            
            if [ ${#PLAN_OUTPUT} -gt 10000 ]; then
              PLAN_OUTPUT="${PLAN_OUTPUT:0:10000}... (truncated)"
            fi
            
            {
              echo "plan_output<<EOF"
              echo "$PLAN_OUTPUT"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          fi

  # ========================================
  # 💰 Cost Estimation (Optional)
  # ========================================

  cost-estimation:
    name: 💰 Cost Estimation
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'pull_request' && needs.changes.outputs.terraform == 'true' && vars.ENABLE_COST_ESTIMATION == 'true'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 📋 Generate Plan for Cost
        working-directory: infra/aws/env/dev
        run: |
          terraform init
          terraform plan -out=tfplan.out
          terraform show -json tfplan.out > tfplan.json

      - name: 💰 Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: 💰 Generate Cost Estimate
        working-directory: infra/aws/env/dev
        run: infracost breakdown --path=tfplan.json --format=json --out-file=infracost.json

      - name: 💬 Comment Cost on PR
        uses: infracost/actions/comment@v1
        with:
          path: infra/aws/env/dev/infracost.json
          behavior: update

  # ========================================
  # 💬 PR Summary
  # ========================================

  pr-summary:
    name: 💬 PR Summary
    runs-on: ubuntu-latest
    needs: [changes, lint-and-security, go-tests, terraform-plan, cost-estimation]
    if: github.event_name == 'pull_request' && always()
    steps:
      - name: 🔍 Find Previous Comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '## 🏗️ Terraform CI Results'

      - name: 💬 Create or Update Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            ## 🏗️ Terraform CI Results
            
            | Check | Status |
            |-------|--------|
            | 🧹 Lint & Security | ${{ needs.lint-and-security.result }} |
            | 🧪 Go Tests | ${{ needs.go-tests.result }} |
            | 📋 Terraform Plan | ${{ needs.terraform-plan.result }} |
            | 💰 Cost Estimation | ${{ needs.cost-estimation.result || '⏭️ Skipped' }} |
            
            ### 🔍 Changes Detected
            - **Terraform**: `${{ needs.changes.outputs.terraform }}`
            - **Tests**: `${{ needs.changes.outputs.tests }}`
            
            ### 📋 Terraform Plan
            <details>
            <summary>Show Plan Output</summary>
            
            ```hcl
            ${{ needs.terraform-plan.outputs.plan_output || 'Plan output not available' }}
            ```
            </details>
            
            ### ✅ Status
            ${{ (needs.lint-and-security.result == 'success' && needs.terraform-plan.result == 'success') && '🎉 Ready for merge!' || '❌ Please fix issues above.' }}
            
            ---
            *Updated: ${{ github.event.pull_request.updated_at }}*
