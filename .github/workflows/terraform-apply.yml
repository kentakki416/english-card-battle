name: 🚀 Terraform Apply

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prd
      confirm_apply:
        description: 'Type "APPLY" exactly to confirm deployment (case sensitive)'
        required: true
        type: string
      dry_run:
        description: 'Run plan only (dry run)'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.7.0"
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  AWS_REGION: ap-northeast-1

jobs:
  terraform-apply:
    name: 🚀 Terraform Apply
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}
      url: https://console.aws.amazon.com/
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_environment: ${{ github.event.inputs.environment }}
    steps:
      - name: 🔍 Validate Inputs
        run: |
          echo "🔍 Validating apply inputs..."
          
          # Normalize inputs
          CONFIRM_APPLY=$(echo "${{ github.event.inputs.confirm_apply }}" | tr -d '[:space:]')
          ENVIRONMENT=$(echo "${{ github.event.inputs.environment }}" | tr -d '[:space:]')
          
          # Check confirmation
          if [[ "${CONFIRM_APPLY}" != "APPLY" ]]; then
            echo "❌ You must type 'APPLY' exactly to confirm"
            exit 1
          fi
          
          # Check environment validity
          if [[ "${ENVIRONMENT}" != "dev" && "${ENVIRONMENT}" != "prd" ]]; then
            echo "❌ Invalid environment: ${ENVIRONMENT}"
            exit 1
          fi
          
          echo "✅ Input validation passed"

      - name: 📥 Checkout & Setup
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔧 Initialize & Plan
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "🚀 Initializing Terraform for ${{ github.event.inputs.environment }}..."
          terraform init
          
          echo "📋 Generating apply plan..."
          terraform plan -detailed-exitcode -out=apply.tfplan
          
          echo "📊 Plan summary:"
          terraform show -no-color apply.tfplan

      - name: 🔍 Safety Checks
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "🔍 Running safety checks..."
          
          # Check for destroy operations
          if terraform show -no-color apply.tfplan | grep -q "destroy"; then
            echo "⚠️ WARNING: Plan contains resource destruction!"
            terraform show -no-color apply.tfplan | grep -A 2 -B 2 "destroy"
          fi
          
          # Check for sensitive data exposure
          if terraform show -no-color apply.tfplan | grep -i "password\|secret\|key" | grep -v "sensitive"; then
            echo "⚠️ WARNING: Potential sensitive data exposure!"
          fi
          
          echo "✅ Safety checks completed"

      - name: 🚀 Execute Apply
        if: github.event.inputs.dry_run != 'true'
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "🚀 Applying infrastructure for ${{ github.event.inputs.environment }}..."
          echo "⏰ Started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          terraform apply apply.tfplan
          
          echo "✅ Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

      - name: 📊 Verify Results
        if: github.event.inputs.dry_run != 'true'
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "📊 Post-apply verification..."
          
          # Show outputs
          echo "=== Terraform Outputs ==="
          terraform output || echo "No outputs defined"
          
          # Show final state
          echo "=== Final State ==="
          RESOURCE_COUNT=$(terraform state list | wc -l)
          echo "📊 Total resources managed: $RESOURCE_COUNT"
          echo "RESOURCE_COUNT=$RESOURCE_COUNT" >> $GITHUB_ENV

      - name: 📊 Summary
        run: |
          echo "## 🚀 Terraform Apply Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌍 Environment | \`${{ github.event.inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔄 Mode | \`${{ github.event.inputs.dry_run == 'true' && 'Dry Run' || 'Execute' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Resources | \`${{ env.RESOURCE_COUNT || 'N/A' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 By | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🕐 Time | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "### 📋 Dry run completed - plan generated" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ To execute, run again with dry_run=false" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ Apply completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "🎉 Infrastructure has been deployed to ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check AWS Console for deployed resources" >> $GITHUB_STEP_SUMMARY
            echo "- Verify application functionality" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor CloudWatch for any issues" >> $GITHUB_STEP_SUMMARY
          fi 
