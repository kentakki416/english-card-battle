name: 🚀 Terraform Apply

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prd
      confirm_apply:
        description: 'Type "APPLY" exactly to confirm deployment (case sensitive)'
        required: true
        type: string
      dry_run:
        description: 'Run plan only (dry run)'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.7.0"
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  AWS_REGION: ap-northeast-1

jobs:
  terraform-apply:
    name: 🚀 Terraform Apply
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}
      url: https://console.aws.amazon.com/
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_environment: ${{ github.event.inputs.environment }}
    steps:
      - name: 🔍 Validate Inputs
        run: |
          echo "🔍 Validating apply inputs..."
          
          # Normalize inputs
          CONFIRM_APPLY=$(echo "${{ github.event.inputs.confirm_apply }}" | tr -d '[:space:]')
          ENVIRONMENT=$(echo "${{ github.event.inputs.environment }}" | tr -d '[:space:]')
          
          # Check confirmation
          if [[ "${CONFIRM_APPLY}" != "APPLY" ]]; then
            echo "❌ You must type 'APPLY' exactly to confirm"
            exit 1
          fi
          
          # Check environment validity
          if [[ "${ENVIRONMENT}" != "dev" && "${ENVIRONMENT}" != "prd" ]]; then
            echo "❌ Invalid environment: ${ENVIRONMENT}"
            exit 1
          fi
          
          echo "✅ Input validation passed"

      - name: 📥 Checkout & Setup
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 🔧 Terraform init
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "🚀 Initializing Terraform for ${{ github.event.inputs.environment }}..."
          terraform init

      - name: 🔧 Terraform plan
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "📋 Generating apply plan..."
          terraform plan -detailed-exitcode -out=apply.tfplan

      - name: 🔍 Terraform show
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "📋 Showing apply plan..."
          terraform show apply.tfplan

      - name: 🔍 Safety Checks
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "🔍 Running safety checks..."
          
          SAFETY_WARNINGS=0
          
          # リソースの削除操作をチェック
          # ケース例: 既存のEC2インスタンス、RDS、S3バケットなどが削除される場合
          # 意図的な削除の場合もあるため警告のみ表示
          if terraform show apply.tfplan | grep -q "destroy"; then
            echo "⚠️ 警告: プランにリソースの削除操作が含まれています"
            echo "削除対象リソース:"
            terraform show apply.tfplan | grep -A 2 -B 2 "destroy"
            echo "DESTROY_DETECTED=true" >> $GITHUB_ENV
            SAFETY_WARNINGS=$((SAFETY_WARNINGS + 1))
          fi
          
          # 機密情報の平文露出をチェック  
          # ケース例: パスワード、APIキー、秘密鍵などが平文で表示される場合
          # Terraformの sensitive = true が正しく設定されていない可能性
          if terraform show apply.tfplan | grep -i "password\|secret\|key" | grep -v "sensitive"; then
            echo "⚠️ 警告: 機密情報が平文で露出している可能性があります"
            echo "対象箇所:"
            terraform show apply.tfplan | grep -i "password\|secret\|key" | grep -v "sensitive"
            echo "SENSITIVE_DETECTED=true" >> $GITHUB_ENV
            SAFETY_WARNINGS=$((SAFETY_WARNINGS + 1))
          fi
          
          # 警告がある場合はSummaryに表示（エラーにはしない）
          if [[ $SAFETY_WARNINGS -gt 0 ]]; then
            echo ""
            echo "⚠️ 安全性チェックで $SAFETY_WARNINGS 件の警告が検出されました"
            echo "詳細は下記のSummaryを確認してください"
            echo "SAFETY_WARNINGS_COUNT=$SAFETY_WARNINGS" >> $GITHUB_ENV
          else
            echo "✅ 安全性チェックで問題は検出されませんでした"
          fi

      - name: 🚀 Execute Apply
        if: github.event.inputs.dry_run != 'true'
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "🚀 Applying infrastructure for ${{ github.event.inputs.environment }}..."
          echo "⏰ Started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          terraform apply apply.tfplan
          
          echo "✅ Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

      - name: 📊 Verify Results
        if: github.event.inputs.dry_run != 'true'
        working-directory: infra/aws/env/${{ github.event.inputs.environment }}
        run: |
          echo "📊 Post-apply verification..."
          
          # Show outputs
          echo "=== Terraform Outputs ==="
          terraform output || echo "No outputs defined"
          
          # Show final state
          echo "=== Final State ==="
          RESOURCE_COUNT=$(terraform state list | wc -l)
          echo "📊 Total resources managed: $RESOURCE_COUNT"
          echo "RESOURCE_COUNT=$RESOURCE_COUNT" >> $GITHUB_ENV

      - name: 📊 Summary
        run: |
          echo "## 🚀 Terraform Apply Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 安全性チェックの警告がある場合は最初に表示
          if [[ "${{ env.SAFETY_WARNINGS_COUNT }}" != "" && "${{ env.SAFETY_WARNINGS_COUNT }}" != "0" ]]; then
            echo "### ⚠️ 安全性チェック警告" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**${{ env.SAFETY_WARNINGS_COUNT }}件の警告が検出されました:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ env.DESTROY_DETECTED }}" == "true" ]]; then
              echo "🗑️ **リソース削除操作**: 既存のリソースが削除されます" >> $GITHUB_STEP_SUMMARY
              echo "   - 意図的な削除の場合は問題ありません" >> $GITHUB_STEP_SUMMARY
              echo "   - 予期しない削除の場合は設定を確認してください" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "${{ env.SENSITIVE_DETECTED }}" == "true" ]]; then
              echo "🔐 **機密情報露出**: パスワードやAPIキーが平文で表示されています" >> $GITHUB_STEP_SUMMARY
              echo "   - Terraformで \`sensitive = true\` を設定してください" >> $GITHUB_STEP_SUMMARY
              echo "   - 機密情報がログに記録される可能性があります" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌍 Environment | \`${{ github.event.inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔄 Mode | \`${{ github.event.inputs.dry_run == 'true' && 'Dry Run' || 'Execute' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Resources | \`${{ env.RESOURCE_COUNT || 'N/A' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚠️ Warnings | \`${{ env.SAFETY_WARNINGS_COUNT || '0' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 By | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🕐 Time | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "### 📋 Dry run completed - plan generated" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ env.SAFETY_WARNINGS_COUNT }}" != "" && "${{ env.SAFETY_WARNINGS_COUNT }}" != "0" ]]; then
              echo "⚠️ **警告を確認してから実行してください** - dry_run=falseで再実行" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ 問題なし - dry_run=falseで実行可能です" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ✅ Apply completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "🎉 Infrastructure has been deployed to ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check AWS Console for deployed resources" >> $GITHUB_STEP_SUMMARY
            echo "- Verify application functionality" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor CloudWatch for any issues" >> $GITHUB_STEP_SUMMARY
          fi 
